name: Lambda-WorkFlow

on:
  push:
    branches:
     - master
     - homolog
     - develop
    paths-ignore:
     - 'terraform/**'
     - '.github/**'

env:
  GITHUB_AUTH_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}

jobs:

  nodeBuild:
    runs-on: ubuntu-latest
    name: Node Build
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.3'

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: |
            '**/node_modules'
            '~/.npm'
          key: node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-${{ hashFiles('package-lock.json') }}
            node-

      - name: Node Build
        uses: terrainvest/.github/actions/node-build@master

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: nodeDist
          path: dist


  deployLambda:
    runs-on: ubuntu-latest
    name: Deploy Lambda
    needs: nodeBuild
    outputs:
      job_context: ${{ toJSON(job) }}
      workspace: ${{steps.get-workspace.outputs.WORKSPACE}}
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Profile
        id: get-workspace
        run: |
          branch_name=$(echo $GITHUB_REF | awk -F / '{print $3}')
          if [[ $branch_name == *"ma"* ]]; then profile="prd"
          elif [[ $branch_name == *"hom"* ]]; then profile="hml"
          else profile="dev"
          fi
          echo "::set-output name=WORKSPACE::$profile"
          echo "WORKSPACE=$profile" >> $GITHUB_ENV

      - name: Setup AWS Profile
        uses: terrainvest/.github/actions/setup-aws-py@master
        with:
          aws_profile: ${{ env.WORKSPACE }}
          root_path: ~/
        env:
          ORG_TF_AWS_KEY_ID: ${{ secrets.ORG_TF_AWS_KEY_ID }}
          ORG_TF_AWS_SECRET_KEY: ${{ secrets.ORG_TF_AWS_SECRET_KEY }}
          HML_TF_AWS_KEY_ID: ${{ secrets.HML_TF_AWS_KEY_ID }}
          HML_TF_AWS_SECRET_KEY: ${{ secrets.HML_TF_AWS_SECRET_KEY }}
          PRD_TF_AWS_KEY_ID: ${{ secrets.PRD_TF_AWS_KEY_ID }}
          PRD_TF_AWS_SECRET_KEY: ${{ secrets.PRD_TF_AWS_SECRET_KEY }}

      - name: Get Dist Folder
        uses: actions/download-artifact@master
        with:
          name: nodeDist
          path: ./dist

      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: ".github/.env.lambda"

      - name: Docker Build and Push
        if: steps.check_files.outputs.files_exists == 'true'
        id: docker-build
        uses: terrainvest/.github/actions/docker-build@master
        with:
          aws_profile: ${{ env.WORKSPACE }}

      - name: Lambda Update
        uses: terrainvest/.github/actions/create-package@master
        with:
          aws_profile: ${{ env.WORKSPACE }}
          using_docker: ${{ steps.check_files.outputs.files_exists }}
          image_uri: ${{ steps.docker-build.outputs.image }}

  if_failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [nodeBuild, deployLambda]
    env:
      WORKSPACE: ${{needs.deployLambda.outputs.workspace}}
      JOB_CONTEXT: ${{needs.deployLambda.outputs.job_context}}
    if: failure()
    steps:
      - uses: actions/checkout@v2
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@v1.0.4
        with:
          webhook_url: ${{ secrets.ACT_WEBHOOK }}
          overwrite: "{title: `Lambda Workflow`, text: `**Workflow Actor:** ${{ github.actor }}\n\n**Environment:** ${{env.WORKSPACE}}\n\n**Branch:** ${{github.ref}}\n\n**Repository:** ${{github.repository}}\n\n**Action:** ${{github.event_name}}`}"
          job: ${{ env.JOB_CONTEXT }}
          needs: ${{ toJson(needs) }}

  if_success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [nodeBuild, deployLambda]
    env:
      WORKSPACE: ${{needs.deployLambda.outputs.workspace}}
      JOB_CONTEXT: ${{needs.deployLambda.outputs.job_context}}
    if: success()
    steps:
      - uses: actions/checkout@v2
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@v1.0.4
        with:
          webhook_url: ${{ secrets.ACT_WEBHOOK }}
          overwrite: "{title: `Lambda Workflow`, text: `**Workflow Actor:** ${{ github.actor }}\n\n**Environment:** ${{env.WORKSPACE}}\n\n**Branch:** ${{github.ref}}\n\n**Repository:** ${{github.repository}}\n\n**Action:** ${{github.event_name}}`}"
          job: ${{ env.JOB_CONTEXT }}
          needs: ${{ toJson(needs) }}

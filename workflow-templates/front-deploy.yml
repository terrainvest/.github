name: Front Workflow

on:
  push:
    branches:
      - master
      - homolog
      - develop
    paths-ignore:
      - 'terraform/**'
      - '.github/**'

  workflow_dispatch:
    inputs:
      environment:        
        required: false

env:
  GITHUB_TERRA_NPM_AUTH_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}
  GITHUB_NPM_AUTH_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}
  FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}
  

jobs:

  install:
    name: install
    runs-on: ubuntu-latest    
    steps:
    
    - uses: actions/checkout@v2
    
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.3'    
    
    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:    
        path: |
          '**/node_modules'
          '~/.npm'
        key: node-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          node-${{ hashFiles('yarn.lock') }}
          node-          

    - name: Set Node Env
      id: get-workspace
      run: |
        branch_name=$(echo $GITHUB_REF | awk -F / '{print $3}')
        if [[ $branch_name == *"ma"* ]]; then profile="production"
        elif [[ $branch_name == *"hom"* ]]; then profile="homologation"
        elif [[ $branch_name == *"dev"* ]]; then profile="development"
        else profile="${{github.event.inputs.environment}}"
        fi
        echo "NODE_ENV=$profile" >> $GITHUB_ENV
        
    - name: Node Build      
      uses: terrainvest/.github/actions/node-build@master      
      env: 
        CI: false
        NODE_ENV: ${{env.NODE_ENV}}

    - name: Check file existence
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: "build/"

    - name: Set Build Path
      id: node_build
      run: |
         if [[ ${{steps.check_files.outputs.files_exists}} == 'true' ]]; then echo "::set-output name=build_path::build"
         else echo "::set-output name=build_path::dist"
         fi

    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: nodeDist
        path: ${{steps.node_build.outputs.build_path}}


  build:
    name: build
    runs-on: ubuntu-latest
    needs: install
    outputs:
      job_context: ${{ toJSON(job) }}
      workspace: ${{steps.get-workspace.outputs.WORKSPACE}}
    steps:

    - uses: actions/checkout@v2
    
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.3'

    - name: Get Profile
      id: get-workspace
      run: |
        input_name=${{github.event.inputs.environment}}
        branch_name=$(echo $GITHUB_REF | awk -F / '{print $3}')
        if [[ $branch_name == *"ma"* || $input_name == *"prod"* ]]; then profile="prd"
        elif [[ $branch_name == *"hom"* || $input_name == *"hom"* ]]; then profile="hml"
        else profile="dev"
        fi
        echo "::set-output name=WORKSPACE::$profile"
        echo "PROFILE=$profile" >> $GITHUB_ENV
        echo "CFID=${profile^^}_CFID" >> $GITHUB_ENV
        echo "BUCKET=${profile^^}_BUCKET" >> $GITHUB_ENV

    - name: Setup AWS Profile
      uses: terrainvest/.github/actions/setup-aws-py@master
      with:
        aws_profile: ${{ env.PROFILE }} 
        root_path: ~/
      env:        
        ORG_TF_AWS_KEY_ID: ${{ secrets.ORG_TF_AWS_KEY_ID }}
        ORG_TF_AWS_SECRET_KEY: ${{ secrets.ORG_TF_AWS_SECRET_KEY }}
        HML_TF_AWS_KEY_ID: ${{ secrets.HML_TF_AWS_KEY_ID }}
        HML_TF_AWS_SECRET_KEY: ${{ secrets.HML_TF_AWS_SECRET_KEY }}
        PRD_TF_AWS_KEY_ID: ${{ secrets.PRD_TF_AWS_KEY_ID }}
        PRD_TF_AWS_SECRET_KEY: ${{ secrets.PRD_TF_AWS_SECRET_KEY }}

    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:    
        path: |
          '**/node_modules'
          '~/.npm'
        key: node-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          node-${{ hashFiles('yarn.lock') }}
          node-

    - name: Get Dist Folder
      uses: actions/download-artifact@master
      with:
        name: nodeDist
        path: build

    - name: Sync Front
      uses: terrainvest/.github/actions/front-sync@master
      with:
        aws_profile: ${{ env.PROFILE }}        
        cf_id: ${{ secrets[env.CFID] }}
        bucket: ${{ secrets[env.BUCKET] }}

  if_failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [ build ]
    env:
      WORKSPACE: ${{needs.build.outputs.workspace}}
      JOB_CONTEXT: ${{needs.build.outputs.job_context}}
    if: failure()
    steps:
      - uses: actions/checkout@v2
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@v1.0.4
        with:
          webhook_url: ${{ secrets.ACT_WEBHOOK }}
          overwrite: "{title: `Front Workflow`,
                    text: `**Workflow Actor:** ${{ github.actor }}\n\n
                          **Environment:** ${{env.WORKSPACE}}\n\n
                          **Branch:** ${{github.ref}}\n\n
                          **Repository:** ${{github.repository}}\n\n
                          **Action:** ${{github.event_name}}\n\n
                          **Bucket:** ${{ secrets[env.BUCKET] }}`}"
          job: ${{ env.JOB_CONTEXT }}
          needs: ${{ toJson(needs) }}
        
  if_success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [ build ]
    env:
      WORKSPACE: ${{needs.build.outputs.workspace}}
      JOB_CONTEXT: ${{needs.build.outputs.job_context}}
    if: success()
    steps:
      - uses: actions/checkout@v2
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@v1.0.4
        with:
          webhook_url: ${{ secrets.ACT_WEBHOOK }}
          overwrite: "{title: `Lambda Workflow`,
                    text: `**Workflow Actor:** ${{ github.actor }}\n\n
                          **Environment:** ${{env.WORKSPACE}}\n\n
                          **Branch:** ${{github.ref}}\n\n
                          **Repository:** ${{github.repository}}\n\n
                          **Action:** ${{github.event_name}}\n\n
                          **Bucket:** ${{ secrets[env.BUCKET] }}`}"
          job: ${{ env.JOB_CONTEXT }}
          needs: ${{ toJson(needs) }}

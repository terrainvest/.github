name: TF-Backend

on: 
  repository_dispatch:
    event_name: ['backend-tf']

env:
  TF_VERSION: 0.14.4
  GITHUB_AUTH_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}

defaults:
  run:
    shell: bash
    working-directory: terraform/backend

jobs:
  
  terraform-plan:
    strategy:
      fail-fast: false
      matrix:
        workspace: [org, dev, hml, prd]
    
    name: ${{ matrix.workspace }}
    runs-on: ubuntu-latest
    env:
      WORKSPACE: ${{ matrix.workspace }}      
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup AWS Profile
      uses: terrainvest/.github/actions/setup-aws-py@master
      with:
        aws_profile: ${{ env.WORKSPACE }} 
        root_path: ~/
      env:        
        ORG_TF_AWS_KEY_ID: ${{ secrets.ORG_TF_AWS_KEY_ID }}
        ORG_TF_AWS_SECRET_KEY: ${{ secrets.ORG_TF_AWS_SECRET_KEY }}
        HML_TF_AWS_KEY_ID: ${{ secrets.HML_TF_AWS_KEY_ID }}
        HML_TF_AWS_SECRET_KEY: ${{ secrets.HML_TF_AWS_SECRET_KEY }}
        PRD_TF_AWS_KEY_ID: ${{ secrets.PRD_TF_AWS_KEY_ID }}
        PRD_TF_AWS_SECRET_KEY: ${{ secrets.PRD_TF_AWS_SECRET_KEY }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Create Workspace
      id: workspace
      run: |
        terraform workspace new ${{ env.WORKSPACE }}
        terraform workspace select ${{ env.WORKSPACE }}        

    - name: Terraform Init
      id: init
      run: terraform init
      
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: false

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -var='aws_profile=${{ env.WORKSPACE }}' -out=plan-file.tfplan
      continue-on-error: true   

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ env.GITHUB_AUTH_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          \`\`\`${process.env.PLAN}\`\`\`
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
        
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - if: steps.plan.outcome == 'failure'
      id: error
      run: echo "::error::Error at planning terraform in ${{env.WORKSPACE}}"

    - name: Terraform Apply
      if: steps.plan.outcome == 'success'
      id: apply
      run: |
        echo "::debug::Applying terraform in ${{env.WORKSPACE}}"
        terraform apply -auto-approve plan-file.tfplan

    - name: Delete AWS Credential
      run: rm -rf ~/.aws

